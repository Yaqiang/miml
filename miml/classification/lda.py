# -*- coding: utf-8 -*-

from smile.classification import LDA

import mipylib.numeric as np
from .classifer import Classifer

class LinearDiscriminantAnalysis(Classifer):
    '''
    Linear Discriminant Analysis

    A classifier with a linear decision boundary, generated by fitting class conditional densities 
    to the data and using Bayesâ€™ rule.

    The model fits a Gaussian density to each class, assuming that all classes share the same 
    covariance matrix.

    The fitted model can also be used to reduce the dimensionality of the input by projecting it to 
    the most discriminative directions.
    
    :param x: (*array*) Training samples. 2D array.
    :param y: (*array*) Training labels in [0, c), where c is the number of classes.
    :param priori: (*array*) The priori probability of each class.
    :param tol: (*float*) a tolerance to decide if a covariance matrix is singular; it will reject 
        variables whose variance is less than tol^2.
    
    :returns: 
    '''
    
    def __init__(self, x=None, y=None, priori=None, tol=0.0001):
        self._x = x
        self._y = y
        self._priori = priori
        self._tol = tol
        if x is None or y is None:
            self._model = None
        else:
            self._learn()
    
    def _learn(self):
        if self._priori is None:
            self._model = LDA(self._x.tojarray('double'), self._y.tojarray('int'), self._tol)
        else:
            self._model = LDA(self._x.tojarray('double'), self._y.tojarray('int'), 
                self._priori.tojarray('double'), self._tol)
    
    def learn(self, x=None, y=None, priori=None, tol=None):
        """
        Learn from input data and labels.
        
        :param x: (*array*) Training samples. 2D array.
        :param y: (*array*) Training labels in [0, c), where c is the number of classes.
        :param priori: (*array*) The priori probability of each class.
        :param tol: (*float*) a tolerance to decide if a covariance matrix is singular; it will reject 
            variables whose variance is less than tol^2.
        """
        if not x is None:
            self._x = x
        if not y is None:
            self._y = y
        if not priori is None:
            self._priori = priori
        if not tol is None:
            self._tol = tol
        self._learn()
        
        
##################################################